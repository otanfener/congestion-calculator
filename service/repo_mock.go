// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/otanfener/congestion-controller/pkg/models"
	"sync"
)

// Ensure, that RepoMock does implement Repo.
// If this is not the case, regenerate this file with moq.
var _ Repo = &RepoMock{}

// RepoMock is a mock implementation of Repo.
//
//	func TestSomethingThatUsesRepo(t *testing.T) {
//
//		// make and configure a mocked Repo
//		mockedRepo := &RepoMock{
//			GetCityFunc: func(ctx context.Context, city string) (models.City, error) {
//				panic("mock out the GetCity method")
//			},
//		}
//
//		// use mockedRepo in code that requires Repo
//		// and then make assertions.
//
//	}
type RepoMock struct {
	// GetCityFunc mocks the GetCity method.
	GetCityFunc func(ctx context.Context, city string) (models.City, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetCity holds details about calls to the GetCity method.
		GetCity []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// City is the city argument value.
			City string
		}
	}
	lockGetCity sync.RWMutex
}

// GetCity calls GetCityFunc.
func (mock *RepoMock) GetCity(ctx context.Context, city string) (models.City, error) {
	if mock.GetCityFunc == nil {
		panic("RepoMock.GetCityFunc: method is nil but Repo.GetCity was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		City string
	}{
		Ctx:  ctx,
		City: city,
	}
	mock.lockGetCity.Lock()
	mock.calls.GetCity = append(mock.calls.GetCity, callInfo)
	mock.lockGetCity.Unlock()
	return mock.GetCityFunc(ctx, city)
}

// GetCityCalls gets all the calls that were made to GetCity.
// Check the length with:
//
//	len(mockedRepo.GetCityCalls())
func (mock *RepoMock) GetCityCalls() []struct {
	Ctx  context.Context
	City string
} {
	var calls []struct {
		Ctx  context.Context
		City string
	}
	mock.lockGetCity.RLock()
	calls = mock.calls.GetCity
	mock.lockGetCity.RUnlock()
	return calls
}
